Android projects are Gradle multi-project builds, with a top-level build.gradle file and a subdirectory called app, with its own build.gradle file. The top-level build file is noted as (Project: HelloWorldGradle) in the figure, and the app build file has (Module: app) appended to it.

There may be two files called gradle.properties. One is local to the project. The other, optional file of the same name exists only if you have a global gradle.properties file in the .gradle sub-directory of your home directory.

### The file settings.gradle is used by Gradle to configure the multi-project build. It should consist of a single line:
```
include ':app'
```

This tells Gradle that the app sub-directory is also a Gradle project. If, at some later time, you were to add an Android Library to this project through the available wizard, another project sub-directory would be created and added to this file.

The last file is called gradle-wrapper.properties, which configures the so-called Gradle Wrapper. This allows you to build Android projects without having to install Gradle first. The contents of the file should be similar to:
```
distributionBase=GRADLE_USER_HOME
distributionPath=wrapper/dists
zipStoreBase=GRADLE_USER_HOME
zipStorePath=wrapper/dists
distributionUrl=https\://services.gradle.org/distributions/gradle-4.1-all.zip
```

The first four lines indicate that when the wrapper runs the first time, it will download a Gradle distribution and store it in the directory .gradle/wrapper/dists in your home directory.

The last line shows the value of the distributionUrl, which is the location where Gradle will download the distribution specified.

[ The specific version number might differ from that shown here (4.1), and the URL might refer to a binary version (-bin) instead of the complete (-all) version shown in this example. ]

### Review the top-level Gradle build file

The project build.gradle file should have contents similar to:

```
// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {    // 1             
    repositories {
        google()
        jcenter()
    }
    dependencies {  // 2          
        classpath 'com.android.tools.build:gradle:3.0.1'

        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

allprojects {  // 3               
    repositories {
        google()
        jcenter()
    }
}

task clean(type: Delete) {  // 4  
    delete rootProject.buildDir
}
```

- 1: Download plugins block
- 2: Identifies the Android plugin
- 3: Configuration for top-level and module projects
- 4: Ad hoc task

Gradle defines a domain-specific language (DSL) for builds, used inside the build files. The buildscript tag is part of that DSL. It tells Gradle that the build requires a plugin that may not be part of the baseline Gradle distribution, and tells Gradle where to find it. In this case, the required plugin is specified using coordinate syntax "group:name:version", where the group is com.android.tools.build, the name is gradle, and the version is 3.0.1.

[ The version number of the Gradle plugin is updated frequently. Please use the latest plugin, as it will contain all the available bug fixes and performance improvements. ]

When Gradle builds this project the first time, the plugin will be downloaded and cached, so this task is only performed once.

The allprojects tag holds configuration details that apply to both the top-level project and any sub-projects it contains. In this case, the block specifies that any required dependencies should be downloaded from google, or jcenter, the public Bintray Artifactory repository at https://jcenter.bintray.com.

Finally, the build file contains a custom (or ad hoc) task, called clean. It uses the built-in task type Delete and configures it so that the clean task will delete the buildDir in the rootProject. Both are project properties, whose values default to the build directory in the project where this app resides.

### Review the build file in the app module

Open the build.gradle file in the app module. The first line is:

```
apply plugin: 'com.android.application'
```

This "applies" the Android plugin (referred to in the buildscript section of the top-level build file) to the current project. Plugins in Gradle can add custom tasks, new configurations, dependencies, and other capabilities to Gradle projects. In this case, applying the Android plugin adds a wide variety of tasks, which are configured by the android block shown next.

```
android {
    compileSdkVersion 26
    defaultConfig {
        applicationId "org.gradle.helloworldgradle"
        minSdkVersion 19
        targetSdkVersion 26
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}
```

These properties are more relevant to Android than the Gradle build system, to they will only be lightly reviewed here. In short:

* The compileSdkVersion is associated with the Android SDK and should always be the latest available version.
* The defaultConfig section hold properties that are shared by all variants (combinations of build types and product flavors) of the app.
* The applicationId is based on the domain name and project name specified when creating the app, and must be unique in the Google Play store.
* The value of minSdkVersion is the minimum Android API you are willing to support with this app, and the targetSdkVersion should be the latest Android version available.
* The value of versionCode should be an integer that is incremented before uploading a new version of the app into the Google Play store. This value, along with the applicationId, tell Google that this is a new version of an existing app, as opposed to a new app.
* The versionName value is used for your own internal version tracking.

